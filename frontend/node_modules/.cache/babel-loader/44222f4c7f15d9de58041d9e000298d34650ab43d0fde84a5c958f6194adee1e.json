{"ast":null,"code":"var _jsxFileName = \"/Users/hansonliao/Downloads/12-adv-starting-project/frontend/src/pages/Eventspage.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n\n// import EventsList from '../components/EventsList';\nimport { Suspense } from \"react\";\nimport { Await, defer, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [fetchedEvents, setFetchedEvents] = useState();\n  // const [error, setError] = useState();\n\n  // useEffect(() => {\n  //   async function fetchEvents() {\n  //     setIsLoading(true);\n\n  //     // moved to app.js\n  //     // const response = await fetch('http://localhost:8080/events');\n\n  //     // if (!response.ok) {\n  //     //   setError('Fetching events failed.');\n  //     // } else {\n  //     //   const resData = await response.json();\n  //     //   setFetchedEvents(resData.events);\n  //     // }\n  //     setIsLoading(false);\n  //   }\n\n  //   fetchEvents();\n  // }, []);\n  const data = useLoaderData();\n  const events = data.events;\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", data.message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 26\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'}\n    // throw { message: 'Could not fetch events' }\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch Events\"\n    }), {\n      status: 500\n    });\n  } else {\n    // MUST parse data now to accomodate for fulfillment\n    const resData = await response.json();\n    return response;\n\n    // the other way to do it:\n    // const resData = await response.json();\n    // // return resData.events;\n\n    // // this is a modern browser feature\n    // const res = new Response('any data', {status: 201});\n  }\n}\n\n// LOADER FUNCTION =============================================================\n// CANNOT USE REACT COMPONENTS LIKE USESTATE, USE EFFECT ,etc\nexport function loader() {\n  // have values wel'll eventually resolve\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","Await","defer","useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","fallback","style","textAlign","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","Response","JSON","stringify","status","resData","json","loader","$RefreshReg$"],"sources":["/Users/hansonliao/Downloads/12-adv-starting-project/frontend/src/pages/Eventspage.jsx"],"sourcesContent":["// import { useEffect, useState } from 'react';\n\n// import EventsList from '../components/EventsList';\nimport { Suspense } from \"react\";\nimport { Await, defer, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [fetchedEvents, setFetchedEvents] = useState();\n  // const [error, setError] = useState();\n\n  // useEffect(() => {\n  //   async function fetchEvents() {\n  //     setIsLoading(true);\n\n  //     // moved to app.js\n  //     // const response = await fetch('http://localhost:8080/events');\n\n  //     // if (!response.ok) {\n  //     //   setError('Fetching events failed.');\n  //     // } else {\n  //     //   const resData = await response.json();\n  //     //   setFetchedEvents(resData.events);\n  //     // }\n  //     setIsLoading(false);\n  //   }\n\n  //   fetchEvents();\n  // }, []);\n  const data = useLoaderData();\n  const events = data.events;\n\n  if (data.isError) {\n    return <p> {data.message} </p>;\n  }\n\n  return (\n    <Suspense fallback={ <p style={{textAlign: 'center'}} >Loading</p> } >\n      <Await resolve={events}>\n        {(loadedEvents) => <EventsList events={loadedEvents} />}\n      </Await>\n    </Suspense>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'}\n    // throw { message: 'Could not fetch events' }\n    throw new Response(JSON.stringify({ message: \"Could not fetch Events\" }), {\n      status: 500,\n    });\n  } else {\n    // MUST parse data now to accomodate for fulfillment\n    const resData = await response.json()\n    return response;\n\n    // the other way to do it:\n    // const resData = await response.json();\n    // // return resData.events;\n\n    // // this is a modern browser feature\n    // const res = new Response('any data', {status: 201});\n  }\n}\n\n// LOADER FUNCTION =============================================================\n// CANNOT USE REACT COMPONENTS LIKE USESTATE, USE EFFECT ,etc\nexport function loader() {\n  // have values wel'll eventually resolve\n  return defer({\n    events: loadEvents(),\n  });\n}\n"],"mappings":";;AAAA;;AAEA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,EAAEC,KAAK,EAAEC,aAAa,QAAQ,kBAAkB;AAC9D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA,MAAMC,IAAI,GAAGN,aAAa,CAAC,CAAC;EAC5B,MAAMO,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,IAAID,IAAI,CAACE,OAAO,EAAE;IAChB,oBAAOL,OAAA;MAAAM,QAAA,GAAG,GAAC,EAACH,IAAI,CAACI,OAAO,EAAC,GAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAChC;EAEA,oBACEX,OAAA,CAACN,QAAQ;IAACkB,QAAQ,eAAGZ,OAAA;MAAGa,KAAK,EAAE;QAACC,SAAS,EAAE;MAAQ,CAAE;MAAAR,QAAA,EAAE;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAG;IAAAL,QAAA,eAClEN,OAAA,CAACL,KAAK;MAACoB,OAAO,EAAEX,MAAO;MAAAE,QAAA,EACnBU,YAAY,iBAAKhB,OAAA,CAACF,UAAU;QAACM,MAAM,EAAEY;MAAa;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf;AAACT,EAAA,CArCQD,UAAU;EAAA,QAuBJJ,aAAa;AAAA;AAAAoB,EAAA,GAvBnBhB,UAAU;AAuCnB,eAAeA,UAAU;AAEzB,eAAeiB,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEjB,OAAO,EAAE;IAAyB,CAAC,CAAC,EAAE;MACxEkB,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;IACA,MAAMC,OAAO,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACrC,OAAOR,QAAQ;;IAEf;IACA;IACA;;IAEA;IACA;EACF;AACF;;AAEA;AACA;AACA,OAAO,SAASS,MAAMA,CAAA,EAAG;EACvB;EACA,OAAOhC,KAAK,CAAC;IACXQ,MAAM,EAAEc,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAY,YAAA,CAAAZ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}