{"ast":null,"code":"var _jsxFileName = \"/Users/hansonliao/Downloads/12-adv-starting-project/frontend/src/pages/NewEventPage.jsx\";\nimport React from \"react\";\nimport { json, redirect } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewEventPage = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"NewEventPage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventForm, {\n      method: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = NewEventPage;\nexport default NewEventPage;\n\n// NEW : this action will send data to the backend save it\n// 'request' contains form data\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  // console.log(request);\n  const data = await request.formData();\n\n  // get access to the form data input values. Extract based on 'name' attribute\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\")\n  };\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(eventData)\n  });\n\n  // error 422 was set on the backend\n  if (response.status === 422) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: \"Could not save event\"\n    }, {\n      status: 500\n    });\n  }\n\n  // response object, to redirect user to different page\n  return redirect(\"/events\");\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["React","json","redirect","EventForm","jsxDEV","_jsxDEV","Fragment","_Fragment","NewEventPage","children","fileName","_jsxFileName","lineNumber","columnNumber","method","_c","action","_ref","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","headers","body","JSON","stringify","status","ok","message","$RefreshReg$"],"sources":["/Users/hansonliao/Downloads/12-adv-starting-project/frontend/src/pages/NewEventPage.jsx"],"sourcesContent":["import React from \"react\";\nimport { json, redirect } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\n\nconst NewEventPage = () => {\n  return (\n    <>\n      <div>NewEventPage</div>\n      <EventForm method=\"\" />\n    </>\n  );\n};\n\nexport default NewEventPage;\n\n// NEW : this action will send data to the backend save it\n// 'request' contains form data\nexport async function action({ request, params }) {\n  // console.log(request);\n  const data = await request.formData();\n\n  // get access to the form data input values. Extract based on 'name' attribute\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\"),\n  };\n\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(eventData),\n  });\n\n  // error 422 was set on the backend\n  if (response.status === 422) {\n    return response;\n  }\n\n  if (!response.ok) {\n    throw json({ message: \"Could not save event\" }, { status: 500 });\n  }\n\n  // response object, to redirect user to different page\n  return redirect(\"/events\");\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACEJ,OAAA;MAAAI,QAAA,EAAK;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBR,OAAA,CAACF,SAAS;MAACW,MAAM,EAAC;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACvB,CAAC;AAEP,CAAC;AAACE,EAAA,GAPIP,YAAY;AASlB,eAAeA,YAAY;;AAE3B;AACA;AACA,OAAO,eAAeQ,MAAMA,CAAAC,IAAA,EAAsB;EAAA,IAArB;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAC9C;EACA,MAAMG,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,CAAC,CAAC;;EAErC;EACA,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACrC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC3Df,MAAM,EAAE,MAAM;IACdgB,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,SAAS;EAChC,CAAC,CAAC;;EAEF;EACA,IAAIM,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;IAC3B,OAAON,QAAQ;EACjB;EAEA,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMlC,IAAI,CAAC;MAAEmC,OAAO,EAAE;IAAuB,CAAC,EAAE;MAAEF,MAAM,EAAE;IAAI,CAAC,CAAC;EAClE;;EAEA;EACA,OAAOhC,QAAQ,CAAC,SAAS,CAAC;AAC5B;AAAC,IAAAa,EAAA;AAAAsB,YAAA,CAAAtB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}