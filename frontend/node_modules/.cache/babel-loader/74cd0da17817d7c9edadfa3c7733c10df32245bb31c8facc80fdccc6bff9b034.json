{"ast":null,"code":"var _jsxFileName = \"/Users/hansonliao/Downloads/12-adv-starting-project/frontend/src/pages/EditEventPage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport EventForm from \"../components/EventForm\";\nimport { useRouteLoaderData } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EditEventPage = () => {\n  _s();\n  // first fetch the data of this event using the loader BUILT IN event detail page:\n  const data = useRouteLoaderData('event-detail');\n  const event = data.event;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"EditEventPage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventForm, {\n      event: event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true);\n};\n_s(EditEventPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EditEventPage;\nexport default EditEventPage;\n\n// PURPOSE: EDIT EVENT\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  // console.log(request);\n  const data = await request.formData();\n\n  // get access to the form data input values. Extract based on 'name' attribute\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\")\n  };\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(eventData)\n  });\n\n  // error 422 was set on the backend\n  if (response.status === 422) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: \"Could not save event\"\n    }, {\n      status: 500\n    });\n  }\n\n  // response object, to redirect user to different page\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"EditEventPage\");","map":{"version":3,"names":["React","EventForm","useRouteLoaderData","jsxDEV","_jsxDEV","Fragment","_Fragment","EditEventPage","_s","data","event","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","request","params","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","status","ok","json","message","redirect","$RefreshReg$"],"sources":["/Users/hansonliao/Downloads/12-adv-starting-project/frontend/src/pages/EditEventPage.jsx"],"sourcesContent":["import React from \"react\";\nimport EventForm from \"../components/EventForm\";\nimport { useRouteLoaderData } from \"react-router-dom\";\n\nconst EditEventPage = () => {\n  // first fetch the data of this event using the loader BUILT IN event detail page:\n  const data = useRouteLoaderData('event-detail');\n  const event = data.event\n\n  return (\n    <>\n      <div>EditEventPage</div>\n      < EventForm event={event} />;\n    </>\n  );\n};\n\nexport default EditEventPage;\n\n// PURPOSE: EDIT EVENT\nexport async function action({ request, params }) {\n  // console.log(request);\n  const data = await request.formData();\n\n  // get access to the form data input values. Extract based on 'name' attribute\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\"),\n  };\n\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(eventData),\n  });\n\n  // error 422 was set on the backend\n  if (response.status === 422) {\n    return response;\n  }\n\n  if (!response.ok) {\n    throw json({ message: \"Could not save event\" }, { status: 500 });\n  }\n\n  // response object, to redirect user to different page\n  return redirect('/events')\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAASC,kBAAkB,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;EACA,MAAMC,IAAI,GAAGP,kBAAkB,CAAC,cAAc,CAAC;EAC/C,MAAMQ,KAAK,GAAGD,IAAI,CAACC,KAAK;EAExB,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,gBACEP,OAAA;MAAAO,QAAA,EAAK;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxBX,OAAA,CAAEH,SAAS;MAACS,KAAK,EAAEA;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAC9B;EAAA,eAAE,CAAC;AAEP,CAAC;AAACP,EAAA,CAXID,aAAa;EAAA,QAEJL,kBAAkB;AAAA;AAAAc,EAAA,GAF3BT,aAAa;AAanB,eAAeA,aAAa;;AAE5B;AACA,OAAO,eAAeU,MAAMA,CAAAC,IAAA,EAAsB;EAAA,IAArB;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAC9C;EACA,MAAMT,IAAI,GAAG,MAAMU,OAAO,CAACE,QAAQ,CAAC,CAAC;;EAErC;EACA,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEd,IAAI,CAACe,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEhB,IAAI,CAACe,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEjB,IAAI,CAACe,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAElB,IAAI,CAACe,GAAG,CAAC,aAAa;EACrC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC3DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAChC,CAAC,CAAC;;EAEF;EACA,IAAIM,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;IAC3B,OAAOP,QAAQ;EACjB;EAEA,IAAI,CAACA,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAMC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAuB,CAAC,EAAE;MAAEH,MAAM,EAAE;IAAI,CAAC,CAAC;EAClE;;EAEA;EACA,OAAOI,QAAQ,CAAC,SAAS,CAAC;AAC5B;AAAC,IAAAvB,EAAA;AAAAwB,YAAA,CAAAxB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}