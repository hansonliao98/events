{"ast":null,"code":"var _jsxFileName = \"/Users/hansonliao/Downloads/12-adv-starting-project/frontend/src/pages/EventDetailPage.jsx\",\n  _s = $RefreshSig$();\nimport { useParams } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport { useRouteLoaderData } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  // this Loaderdata hook is slightly different\n  // takes in arguement: \n  const data = useRouteLoaderData('event-detail');\n  const params = useParams();\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventDetailPage, \"iiolLy+VYD9IIVQsNE+eQAIrP+Q=\", false, function () {\n  return [useRouteLoaderData, useParams];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\n\n// PURPOSE of loader here: extract infomation of event ========================================\n// REMEMBER YOU CANT USE THE REACT HOOKS like USEPARAMS\n// instead did you know? the Loader function passes 2 arguments:\n// request = \n// params = \nexport async function loader(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  // console.log(params);\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'}\n    // throw { message: 'Could not fetch events' }\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch details\"\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function action(_ref2) {\n  let {\n    request,\n    params\n  } = _ref2;\n  const id = params.eventId;\n  const response = fetch('http://localhost:8080/events/' + id);\n}\n\n// TRASH ===================================================================\n// export async function action({ request, params }) {\n//   // console.log(request);\n//   const data = await request.formData();\n\n//   // get access to the form data input values. Extract based on 'name' attribute\n//   const eventData = {\n//     title: data.get(\"title\"),\n//     image: data.get(\"image\"),\n//     date: data.get(\"date\"),\n//     description: data.get(\"description\"),\n//   };\n\n//   const response = await fetch(\"http://localhost:8080/events\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify(eventData),\n//   });\n\n//   if (!response.ok) {\n//     throw json({ message: \"Could not save event\" }, { status: 500 });\n//   }\n\n//   // response object, to redirect user to different page\n//   return redirect('/events')\n// }\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useParams","EventItem","useRouteLoaderData","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","data","params","console","log","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","_ref","request","id","eventId","response","fetch","ok","Response","JSON","stringify","message","status","action","_ref2","$RefreshReg$"],"sources":["/Users/hansonliao/Downloads/12-adv-starting-project/frontend/src/pages/EventDetailPage.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport { useRouteLoaderData } from 'react-router-dom';\n\nfunction EventDetailPage() {\n  // this Loaderdata hook is slightly different\n  // takes in arguement: \n  const data = useRouteLoaderData('event-detail');\n  const params = useParams();\n\n  console.log(data);\n  return (\n    <>\n      {/* <h1>EventDetailPage</h1>\n      <p>Event ID: {params.eventId}</p> */}\n      <EventItem event={data.event} />\n    </>\n  );\n}\n\nexport default EventDetailPage;\n\n// PURPOSE of loader here: extract infomation of event ========================================\n// REMEMBER YOU CANT USE THE REACT HOOKS like USEPARAMS\n// instead did you know? the Loader function passes 2 arguments:\n// request = \n// params = \nexport async function loader({request, params}) {\n  // console.log(params);\n  const id = params.eventId;\n\n  const response = await fetch('http://localhost:8080/events/' + id);\n\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'}\n    // throw { message: 'Could not fetch events' }\n    throw new Response(JSON.stringify({ message: \"Could not fetch details\" }), {\n      status: 500,\n    });\n  } else {\n    return response;\n  }\n}\n\nexport async function action({ request, params }) {\n  const id = params.eventId\n\n  const response = fetch('http://localhost:8080/events/' + id)\n}\n\n// TRASH ===================================================================\n// export async function action({ request, params }) {\n//   // console.log(request);\n//   const data = await request.formData();\n\n//   // get access to the form data input values. Extract based on 'name' attribute\n//   const eventData = {\n//     title: data.get(\"title\"),\n//     image: data.get(\"image\"),\n//     date: data.get(\"date\"),\n//     description: data.get(\"description\"),\n//   };\n\n//   const response = await fetch(\"http://localhost:8080/events\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify(eventData),\n//   });\n\n//   if (!response.ok) {\n//     throw json({ message: \"Could not save event\" }, { status: 500 });\n//   }\n\n//   // response object, to redirect user to different page\n//   return redirect('/events')\n// }"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAASC,kBAAkB,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB;EACA;EACA,MAAMC,IAAI,GAAGP,kBAAkB,CAAC,cAAc,CAAC;EAC/C,MAAMQ,MAAM,GAAGV,SAAS,CAAC,CAAC;EAE1BW,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB,oBACEL,OAAA,CAAAE,SAAA;IAAAO,QAAA,eAGET,OAAA,CAACH,SAAS;MAACa,KAAK,EAAEL,IAAI,CAACK;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAChC,CAAC;AAEP;AAACV,EAAA,CAdQD,eAAe;EAAA,QAGTL,kBAAkB,EAChBF,SAAS;AAAA;AAAAmB,EAAA,GAJjBZ,eAAe;AAgBxB,eAAeA,eAAe;;AAE9B;AACA;AACA;AACA;AACA;AACA,OAAO,eAAea,MAAMA,CAAAC,IAAA,EAAoB;EAAA,IAAnB;IAACC,OAAO;IAAEZ;EAAM,CAAC,GAAAW,IAAA;EAC5C;EACA,MAAME,EAAE,GAAGb,MAAM,CAACc,OAAO;EAEzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MACzEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOP,QAAQ;EACjB;AACF;AAEA,OAAO,eAAeQ,MAAMA,CAAAC,KAAA,EAAsB;EAAA,IAArB;IAAEZ,OAAO;IAAEZ;EAAO,CAAC,GAAAwB,KAAA;EAC9C,MAAMX,EAAE,GAAGb,MAAM,CAACc,OAAO;EAEzB,MAAMC,QAAQ,GAAGC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;AAC9D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA,IAAAJ,EAAA;AAAAgB,YAAA,CAAAhB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}